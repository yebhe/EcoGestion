import ssl
import smtplib
from django.core.mail.backends.smtp import EmailBackend as DjangoEmailBackend
import logging

logger = logging.getLogger(__name__)

class RobustEmailBackend(DjangoEmailBackend):
    """
    Backend email robuste qui g√®re les probl√®mes SSL dans Docker
    tout en conservant la s√©curit√©
    """
    
    def open(self):
        """
        Ouvre la connexion SMTP avec gestion intelligente SSL
        """
        if self.connection:
            return False
            
        try:
            # Tentative avec SSL standard (s√©curis√©)
            print("üîí Tentative de connexion SSL standard...")
            return self._open_with_standard_ssl()
        except ssl.SSLCertVerificationError as ssl_error:
            print(f"‚ö†Ô∏è √âchec SSL standard: {ssl_error}")
            print("üîß Utilisation du SSL personnalis√© pour Docker...")
            try:
                # Fallback avec SSL moins strict pour Docker
                return self._open_with_custom_ssl()
            except Exception as e:
                print(f"‚ùå √âchec connexion email: {e}")
                if not self.fail_silently:
                    raise e
                return False
        except Exception as e:
            print(f"‚ùå Erreur connexion g√©n√©rale: {e}")
            if not self.fail_silently:
                raise e
            return False
    
    def _open_with_standard_ssl(self):
        """Tentative avec SSL standard"""
        self.connection = smtplib.SMTP(self.host, self.port, timeout=self.timeout)
        
        if self.use_tls:
            self.connection.starttls()
            
        if self.username and self.password:
            self.connection.login(self.username, self.password)
            
        print("‚úÖ Connexion SSL standard r√©ussie")
        return True
    
    def _open_with_custom_ssl(self):
        """Fallback avec SSL personnalis√© pour Docker"""
        self.connection = smtplib.SMTP(self.host, self.port, timeout=self.timeout)
        
        if self.use_tls:
            # Cr√©er un contexte SSL personnalis√© pour Docker
            context = ssl.create_default_context()
            context.check_hostname = False
            context.verify_mode = ssl.CERT_NONE
            
            self.connection.starttls(context=context)
            
        if self.username and self.password:
            self.connection.login(self.username, self.password)
            
        print("‚úÖ Connexion SSL personnalis√© r√©ussie (Docker)")
        return True