"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from datetime import timedelta

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-3yd3hapbu#8ary=urdx$b&--h@6qon(%b&yqku38o%x$^3ay3k')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

# Force serving static files pour Docker
SERVE_STATIC_FILES = True

# Configuration adaptée pour Docker
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '*').split(',') if os.getenv('ALLOWED_HOSTS') else ['*']

# Configuration Stripe (vos paramètres conservés)
STRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY', 'pk_test_51RhuQvCX4t4MFZAnNLKXnhGgdUHH4GxznjRR0qS4FlVpaQtMqjZGwapatYBKzw5FFIjDuO23EMKSxFsLL9fw1QRz00k0szoa4m')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY', 'sk_test_51RhuQvCX4t4MFZAnHEgntOBaZsw1l9wUa7LHCf9r1o8arzpGJwjw4yvgy557MVyefQpfQASBa9UzGjU7VKbZqNUt00ZK67XXxN')

# Commission de la plateforme (10%) - votre paramètre conservé
COMMISSION_PLATEFORME = 0.10

# Application definition (vos apps conservées)
INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    'import_export',
    'rest_framework',
    'djoser',
    'corsheaders',

    'ecodeli_auth',
    'livreur',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # OBLIGATOIRE pour servir les static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Configuration CSRF (vos paramètres + Docker)
CSRF_COOKIE_NAME = "csrftoken"
CSRF_COOKIE_HTTPONLY = False
CSRF_COOKIE_SECURE = False

CSRF_TRUSTED_ORIGINS = [
    'http://127.0.0.1:8000',
    'http://localhost:8000',
    'http://127.0.0.1:5173',
    'http://127.0.0.1:3000',
    'http://localhost:5173',
    'http://localhost:3000',
    # Ajouts pour Docker
    'http://localhost',
    'http://127.0.0.1',
]

# Configuration CORS (vos paramètres + Docker)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    'http://127.0.0.1:8000',
    'http://localhost:8000',
    'http://127.0.0.1:3000',
    'http://localhost:3000',
    # Ajouts pour Docker
    'http://localhost',
    'http://127.0.0.1',
]

CORS_ALLOW_CREDENTIALS = True

CORS_ORIGIN_WHITELIST = [
    "http://localhost:5173",
    'http://127.0.0.1:5173',    
    'http://127.0.0.1:8000',
    'http://localhost:8000',
    # Ajouts pour Docker
    'http://localhost',
    'http://127.0.0.1',
]

# REST Framework (votre configuration conservée)
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR.joinpath("templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Configuration Email Gmail - Backend robuste pour Docker
EMAIL_BACKEND = 'backend.email_backend.RobustEmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_HOST_USER = 'lamarana.yebhe@gmail.com'
EMAIL_HOST_PASSWORD = 'cehsfqtjuubfhtdo'
DEFAULT_FROM_EMAIL = 'lamarana.yebhe@gmail.com'
SERVER_EMAIL = 'lamarana.yebhe@gmail.com'
EMAIL_TIMEOUT = 60

# Configuration de logging pour les emails
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'backend.email_backend': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Database - Adaptée pour Docker avec volume persistant
AUTH_USER_MODEL = "ecodeli_auth.User"

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db' / 'db.sqlite3',  # Modifié pour utiliser le volume Docker
    }
}

# JWT Configuration (vos paramètres conservés)
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=20),  
    'REFRESH_TOKEN_LIFETIME': timedelta(days=2),  
    'ROTATE_REFRESH_TOKENS': True,  
    'BLACKLIST_AFTER_ROTATION': True,  
}

# Djoser Configuration (vos paramètres conservés)
DJOSER = {
    'LOGIN_FIELD': 'email',  
    'USER_CREATE_PASSWORD_RETYPE': False,  
    'SEND_CONFIRMATION_EMAIL': True,   # Activé pour envoyer l'email de confirmation
    'SEND_ACTIVATION_EMAIL': True,     # Activé pour envoyer l'email d'activation
    'PASSWORD_RESET_CONFIRM_URL': 'password/reset/{uid}/{token}',
    'ACTIVATION_URL': 'activate/{uid}/{token}',  # URL d'activation
    'SERIALIZERS': {
        'user_create': 'ecodeli_auth.serializers.UserModelCreateSerializer',
        'user': 'ecodeli_auth.serializers.UserModelSerializer',  
        'password_reset_confirm': 'ecodeli_auth.serializers.UserModelUpdatePasswordSerializer',
        'user_update': 'ecodeli_auth.serializers.CustomUserUpdateSerializer',
    },
}

# Internationalization (vos paramètres conservés)
LANGUAGE_CODE = 'fr'
USE_I18N = True
USE_L10N = True
USE_TZ = True
TIME_ZONE = 'UTC'

LOCALE_PATHS = [
    BASE_DIR / "locale", 
]

# Password validation (vos paramètres conservés)
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Static files - Configuration avec WhiteNoise pour Docker
STATIC_URL = '/static/'
STATIC_ROOT = '/app/staticfiles'

# Utiliser WhiteNoise pour servir les fichiers statiques
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Pas de STATICFILES_DIRS pour éviter les conflits
STATICFILES_DIRS = []

# Configuration pour servir les fichiers statiques
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# Media files (vos paramètres conservés)
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Jazzmin Configuration (tous vos paramètres conservés)
JAZZMIN_SETTINGS = {
    "site_title": "EcoDeli",
    "site_header": "EcoDeli",
    "site_brand": "EcoDeli",
    "site_logo": "car_logo.png",
    "login_logo": "car_logo.png",
    "login_logo_dark": None,
    "site_logo_classes": "img-circle",
    "site_icon": 'car_logo.png',
    "welcome_sign": "Bienvenue sur votre interface Admin EcoDeli",
    "copyright": "EcoDeli",
    "search_model": ["auth.User", "auth.Group"],
    "user_avatar": None,
    "topmenu_links": [
        {"name": "Home",  "url": "/", "permissions": ["auth.view_user"]},
        {"model": "auth.User"},
        {"app": "books"},
    ],
    "usermenu_links": [
        {"model": "auth.user"}
    ],
    "show_sidebar": True,
    "navigation_expanded": True,
    "hide_apps": [],
    "hide_models": [],
    "order_with_respect_to": ["auth", "books", "books.author", "books.book"],
    "custom_links": {
        "books": [{
            "name": "Make Messages", 
            "url": "make_messages", 
            "icon": "fas fa-comments",
            "permissions": ["books.view_book"]
        }]
    },
    "icons": {
        "auth": "fas fa-users-cog",
        "auth.user": "fas fa-user",
        "auth.Group": "fas fa-users",
    },
    "default_icon_parents": "fas fa-chevron-circle-right",
    "default_icon_children": "fas fa-circle",
    "related_modal_active": False,
    "custom_js": "js/custom.js",
    "custom_css": "css/custom.css",
    "use_google_fonts_cdn": True,
    "show_ui_builder": True,
    "changeform_format": "horizontal_tabs",
    "changeform_format_overrides": {"auth.user": "collapsible", "auth.group": "vertical_tabs"},
}

JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": False,
    "brand_small_text": False,
    "brand_colour": "navbar-orange",
    "accent": "accent-orange",
    "navbar": "navbar-primary navbar-dark",
    "no_navbar_border": False,
    "navbar_fixed": True,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": False,
    "sidebar": "sidebar-dark-primary",
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": False,
    "sidebar_nav_compact_style": False,
    "sidebar_nav_legacy_style": False,
    "sidebar_nav_flat_style": False,
    "theme": "darkly",
    "dark_mode_theme": "cyborg",
    "button_classes": {
        "primary": "btn-primary",
        "secondary": "btn-secondary",
        "info": "btn-info",
        "warning": "btn-warning",
        "danger": "btn-danger",
        "success": "btn-success"
    }
}